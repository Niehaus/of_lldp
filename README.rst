********
Overview
********

The *of_lldp* application implements the Link Layer Discovery Protocol (LLDP).

************
How it Works
************

In order to track connections between switches under the present SDN
controller, this NAPP uses the LLDP protocol with the following procedure:

1. Periodically this NApp build and send a PacketOut OpenFlow message
   containing the and Ethernet Packet with LLDP data. to forward any LLDP.
   This LLDP packet is designed to the specific switch and port related to the
   PacketOut, by caring the switch DPID and the Port that it will be forwarded
   to.

2. The switches forward the packet throught the given Port and, if another
   switch is connected to that port, it won't know how to handle the Ethernet
   packet that was forwarded. So, it will send a ``PacketIn`` with that
   Ethernet packet to the controller..

3. This NApp will get all ``PacketIn`` messages and look for Ethernet packets
   with LLDP content. If it is one of the LLDP packets generated by the NApp,
   than it will get the information from the ``PacketIn`` (switch/dpid and
   in_port).

4. At last but not least, the NApp will generate a KytosEvent with the
   'source-destination' information.

This protocol is vendor free and used to discover network devices and all links
between them. This protocol is implemented at layer 2 (L2) and defined in the
IEEE 802.1ab. A network management system (NMS) can rapidly obtain the L2
network topology and topology changes over time using LLDP.

Installing
==========

All of the Kytos Network Applications are located in the NApps online
repository. To install this NApp, run:

.. code:: shell

   $ kytos napps install kytos/of_lldp

Events
======

Listen
------
kytos/of_core.v0x0[14].messages.in.ofpt_packet_in
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Listen to any OpenFlow PacketIn in versions 1.0 (v0x01) or 1.3 (v0x04).

Generate
--------
kytos/of_lldp.messages.out.ofpt_packet_out
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``message_out``

Standard "message out" event with a PacketOut message to the switch containing
a LLDP packet inside it.

kytos/of_lldp.interface.is.nni
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*buffer*: ``app``

An event to notify those interested that an interface was identified as a NNI
interface. This is possible due to the fact that a connection between two
switches was identified. This does not mean that it is a new connection, it may
be an already known connection between two switches. This event contains an
attribute `switch` and another `port`, the first one contains the switch id and
the second one the port number.

The content of an event will have the following format:

.. code-block:: python3

   content = {'switch': switch.id, 'port': port_number}}

Advanced
========

Protocol Operation
------------------

LLDP compliant network devices regularly exchange LLDP advertisements
with their neighbors and store it in their internal database (MIB). A
Network Management Software (NMS) can use SNMP to access this
information to build an inventory of the network devices connected on
the network, and for other applications. LLDP advertisements can be sent
to/received from devices that are directly connected with each other
through a physical link.

LLDP have some features it uses in advertising,discovering and learning
neighbor devices. These attributes contain type, length, and value
descriptions and are referred to as TLVs.

TLVs are used by LLDP to receive, send and gather information to and
from their neighbors. Details such as configuration information, device
capabilities, and device identity are information advertised using this
protocol.

Some of common TLVs supported by switches are:

-  Port description TLV;
-  System name TLV;
-  System description TLV;
-  System capabilities TLV;
-  Management address TLV.

It is important to note that some vendors implementes their own TLVs.
